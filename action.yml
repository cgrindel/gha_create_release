name: "Create Release"
description: "Create a release tag, generate release notes, create a release, update the README.md and open a PR for the README.md update."

inputs:
  release_tag:
    required: true
    type: string
  github_token:
    description: The Github token to authenticate PR operations.
    required: true
  reset_tag:
    type: boolean
    default: false
  release_notes_target:
    type: string
    default: "//release:generate_release_notes"
  update_readme_target:
    type: string
    default: "//release:update_readme"
  release_archive_target:
    type: string
    default: "//release:archive"
  release_archive_sha256_target:
    type: string
    default: "//release:archive_sha256"
  readme_path:
    type: string
    default: "README.md"
  create_release_tag_target:
    type: string
    default: "@cgrindel_bazel_starlib//bzlrelease/tools:create_release_tag"
  base_branch:
    description: The branch being merged to.
    type: string
    default: main
  workspace_path:
    description: "The Bazel workspace directory."
    type: string
    default: ""
  repository:
    description: "The repository where the release should occur."

outputs:
  release_url:
    description: "The URL for the release."
    value: ${{ steps.create_release.outputs.url }}
  release_id:
    description: "The ID for the release."
    value: ${{ steps.create_release.outputs.id }}
  update_readme_pr_number:
    description: "The PR number for the update README.md PR."
    value: ${{ steps.create_pr.outputs.pull-request-number }}
  update_readme_pr_url:
    description: "The URL for the update README.md PR."
    value: ${{ steps.create_pr.outputs.pull-request-url }}

runs:
  using: composite
  steps:
    - uses: cgrindel/gha_configure_git_user@v1
      with:
        path: ${{ inputs.workspace_path }}

    - uses: cgrindel/gha_select_value@v1
      id: resolve_repository_name
      name: Resolve Repository Name
      with:
        value0: ${{ inputs.repository }}
        value1: ${{ github.repository }}

    - name: DEBUG
      shell: bash
      env:
        REPO_NAME: ${{ steps.resolve_repository_name.outputs.selected_value }}
      run: |
        echo "Hello"
        echo "REPO_NAME: ${REPO_NAME:-}"

    - name: Create Release Outputs Directory
      id: create_release_outputs_dir
      shell: bash
      run: |
        release_outputs_dir="${HOME}/create_release_outputs"
        mkdir -p "${release_outputs_dir}"
        echo "::set-output name=release_outputs_dir::${release_outputs_dir}"

    - name: Create Release Tag
      shell: bash
      env:
        CREATE_RELEASE_TAG_TARGET: ${{ inputs.create_release_tag_target }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        RELEASE_TAG: ${{ inputs.release_tag }}
        RESET_TAG: ${{ inputs.reset_tag }}
        WORKSPACE_PATH: ${{ inputs.workspace_path }}
      run: |
        [[ -z "${WORKSPACE_PATH:-}" ]] || cd "${WORKSPACE_PATH}"
        tag_args=()
        [[ "${RESET_TAG:-}" == true ]] && tag_args+=( "--reset_tag" )
        tag_args+=( "${RELEASE_TAG}" )
        bazelisk run "${CREATE_RELEASE_TAG_TARGET}" -- "${tag_args[@]}"

    - name: Build Release Artifacts
      id: build_release_artifacts
      shell: bash
      env:
        RELEASE_ARCHIVE_SHA256_TARGET: ${{ inputs.release_archive_sha256_target }}
        RELEASE_ARCHIVE_TARGET: ${{ inputs.release_archive_target }}
        RELEASE_OUTPUTS_DIR: ${{ steps.create_release_outputs_dir.release_outputs_dir }}
        RELEASE_TAG: ${{ inputs.release_tag }}
        WORKSPACE_PATH: ${{ inputs.workspace_path }}
      run : |
        [[ -z "${WORKSPACE_PATH:-}" ]] || cd "${WORKSPACE_PATH}"
        # DEBUG BEGIN
        set -x
        # DEBUG END
        bazelisk build -c opt "${RELEASE_ARCHIVE_TARGET}" "${RELEASE_ARCHIVE_SHA256_TARGET}"
        archive_path="$(bazelisk cquery "${RELEASE_ARCHIVE_TARGET}" --output=files 2>/dev/null)"
        sha256_path="$(bazelisk cquery "${RELEASE_ARCHIVE_SHA256_TARGET}" --output=files 2>/dev/null)"
        ext="${archive_path#*.}"
        release_archive_path="${RELEASE_OUTPUTS_DIR}/${RELEASE_TAG}.${ext}"
        release_archive_sha256_path="${RELEASE_OUTPUTS_DIR}/${RELEASE_TAG}.${ext}.sha256"
        release_artifacts_list="$(cat <<-EOF
        ${release_archive_path}
        ${release_archive_sha256_path}
        EOF
        )"
        # DEBUG BEGIN
        ls -la >&2
        # DEBUG END
        cp "${archive_path}" "${release_archive_path}"
        cp "${sha256_path}" "${release_archive_sha256_path}"
        echo "::set-output name=release_archive_path::${release_archive_path}"
        echo "::set-output name=release_archive_sha256_path::${release_archive_sha256_path}"
        echo "::set-output name=release_artifacts_list::${release_artifacts_list}"

    - name: Generate Release Notes
      id: generate_release_notes
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        RELEASE_NOTES_TARGET: ${{ inputs.release_notes_target }}
        RELEASE_OUTPUTS_DIR: ${{ steps.create_release_outputs_dir.release_outputs_dir }}
        RELEASE_TAG: ${{ inputs.release_tag }}
        WORKSPACE_PATH: ${{ inputs.workspace_path }}
      run: |
        [[ -z "${WORKSPACE_PATH:-}" ]] || cd "${WORKSPACE_PATH}"
        # Do not output the release_notes.md in the git repo. It will make 
        # later steps unhappy due to untracked files.
        release_notes_path="${RELEASE_OUTPUTS_DIR}/release_notes.md"
        bazelisk run "${RELEASE_NOTES_TARGET}" -- \
          --output "${release_notes_path}" \
          "${RELEASE_TAG}"
        echo "::set-output name=release_notes_path::${release_notes_path}"

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ inputs.release_tag }}
        body_path: ${{ steps.generate_release_notes.outputs.release_notes_path }}
        tag_name: ${{ inputs.release_tag }}
        token: ${{ inputs.github_token }}
        repository: ${{ steps.resolve_repository_name.outputs.selected_value }}
        files: ${{ steps.build_release_artifacts.outputs.release_artifacts_list }}

    - name: Update README.md
      shell: bash
      env:
        UPDATE_README_TARGET: ${{ inputs.update_readme_target }}
        RELEASE_TAG: ${{ inputs.release_tag }}
        README_PATH: ${{ inputs.readme_path }}
        WORKSPACE_PATH: ${{ inputs.workspace_path }}
      run: |
        [[ -z "${WORKSPACE_PATH:-}" ]] || cd "${WORKSPACE_PATH}"
        bazelisk run "${UPDATE_README_TARGET}" -- \
          --readme "${README_PATH}" \
          "${RELEASE_TAG}"

    - name: Create PR for README.md Update
      id: create_pr
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ inputs.github_token }}
        add-paths: |
          ${{ inputs.readme_path }}
        branch: auto_update_readme_for_${{ inputs.release_tag }}
        base: ${{ inputs.base_branch }}
        delete-branch: true
        title: Update README.md for ${{ inputs.release_tag }}
        body: Automated update of `${{ inputs.readme_path }}` for release ${{ inputs.release_tag }}
        path: ${{ inputs.workspace_path }}

    - name: Enable PR Automerge
      if: steps.create_pr.outputs.pull-request-operation == 'created'
      uses: peter-evans/enable-pull-request-automerge@v2
      with:
        token: ${{ inputs.github_token }}
        pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
        merge-method: squash
        repository: ${{ steps.resolve_repository_name.outputs.selected_value }}
